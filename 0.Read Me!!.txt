Description of functions and scripts needed to run generate the transition table and case studies.

All data is saved in the folder called "Data", external to this code package. That folder needs to be in the Matlab path, as the scripts
read and write data from it.

The Final Code Packages contains the bare minumum code to run the case studies.

Description of files according to list of operation from generating the transition table to get the econ report:

CreateTransitionNetwork - generates the transition table. Does not need any external data files. The script is divided into 2 parts:
	1) Generate the node table, based on the time step, dt, and end time;
	2) Iterate through the generated node table, in a parfor loop and generate all the allowable transitions, with the restrictions imposed in the paper.

This script does not need to be run everytime, only when changes to the strucutre of the network are required. All the other scripts use the output of this one,
called 'graph24h.mat', saved in the 'Data' folder.


assign_all_costs - assigns the costs of the edges for all days and buildings combinations. Also generates the demand profiles and electricity tariffs and stores them
in a matrix. Smoothing of the demand data is performed here. All the data needed to run the shortest path solver is assembled and generated here and the results are
saved in the file 'graph_data_all_days.mat'. This script uses the function assign_costs_fcn, which is the building block of edge cost assignment.
Furthermore, the function new_mapping_iliya is used to reduce the storage size of the transition table and allow for faster computation.


generate_all_figures - runs shortest path solver, plots figures for all days, buildings and fuel costs and generates all the economic metrics.

econ_analysis_tables - with the data generated from generate_all_figures, performs analysis of economic metrics and outputs the results as an excel spreadsheet.

CreateDemandProfileVector - Johns code, returns the electricity and heat demand profiles. I changed the building order to make the large hotel the first building.

CreateElectricityTariffProfile - generates the electricity tariff profiles based on the pfd references, for all buildings.

GenerateDemandCharges - computes the demand charges for a given building and day. Used by generate_all_figures.

extract_path - retrives the solution of the shortest path algorithm as power and heat production profiles, as well as the fuel consumption at each time step. 
Uses the function nakeinterp1 to interpolate the production when w the speed is ramped up so that the final length of the vector is correct.

new_mappings_iliya - Tranform the Transition table generated by CreateTransitionNetwork into an equivalent description that takes less space.

run_all - runs assign_all_costs, generate_all_figures and econ_analysis_tables in sequence
------------------------------------------------------------------------------------------
Code to prepare next phase:

condensed_state_representation -  Right now the nodes are identified by a string, that takes 12 to 24 bytes to store the info (time step, s and v settings).
One of the reasons why generating the transition table takes so long is because the node table that is generated is extremly large, due to the storage of the names
and because at each step it is necessary to evaluate info contained in the string to chose which transitions are allowed. Ilya and me though of a way of storing the
info, without strings, that would drastically reduce the size of the node and transition table and allow for a considerable speed up when generating the tables.

The idea is to describe the state using a uint32, where the first 6 bits are the state from, next 6 are the state to and the remaining bits
(MSB, the leftmost ones) represent the timestep. Only six bits are needed to describe the to and from states, because there are only 46 states per time step.
The remaining 20 bits for the time allow us to represent at max 1048575 time steps (2^20-1), while one full year of data can be described by 365*24*60*60/15=2102400 time steps.

Hence, this representation allows to run half a year of data at once.
The mapping to and from a 'readable' format is accomplished through bit shifting operations amnd is described and commented on the file.

If there is a need to speed up the code, the first thing that needs to be done is changing the state representation (possibly to the one described here) and moving part of 
the computation of the transition table to the GPU.