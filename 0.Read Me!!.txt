Description of functions and scripts needed to run generate the transition table and case studies.

All data is saved in the folder called "Data", external to this code package. That folder needs to be in the MATLAB path, as the scripts
read and write data from it.

The Final Code Packages contains the bare minumum code to run the case studies.

Description of files according to list of operation from generating the transition table to get the econ report:

createTransitionNetwork - generates the transition table. Does not need any external data files. The script is divided to a few parts:
	1) Build a small adjacency matrix, defining all possibile transitions from all states (t,S,V) for a fixed t and S=1,...,s and V = 0,...,v-1.
	2) Replicate the adjacency matrix T times, where T is the number of time instances in the ED problem. 
	3) Add the source and terminal nodes.
	4) Build the graph from the composite adjacency matrix.
Here, the nodes are indexed as 1,2,3,... Node number 1 is the source node. The next (s*v+1) nodes correspond to time 0. The next (s*v+1) nodes correspond
to time 1, etc. This continues for a total to T times, culminating in a single terminal node. Inside each layer, the nodes are organized as follows:
The first node is the 'off' state. The rest are ordered in the following way:
(1,0),(2,0),...(s,0),(1,1),(2,1),...,(s,1),......,(1,v-1),(2,v-1),...,(s,v-1)

This script does not need to be run every time, only when changes to the strucutre of the network are required. However, the script has been significantly
accelerated, and takes less than a minute to run. All the other scripts use the output of this one, called 'graph_24h.mat', saved in the "Data" folder
inside this code package. It must be copied or moved to the external "Data" package.

assignAllCosts - assigns the costs of the edges for all days and buildings combinations. Also generates the demand profiles and electricity tariffs and stores them
in a matrix. Smoothing of the demand data is performed here. All the data needed to run the shortest path solver is assembled and generated here and the results are
saved in the file 'graph_data_all_days.mat'. This script uses the function assignCosts, which is the building block of edge cost assignment.
Furthermore, the function transformAdjacencyMatrix is used to conduct auxiliary computations, allowing for faster computation.

generate_all_figures - runs shortest path solver, plots figures for all days, buildings and fuel costs and generates all the economic metrics.

econAnalysisTables - with the data generated from generate_all_figures, performs analysis of economic metrics and outputs the results as an excel spreadsheet.

createDemandProfileVector - Johannes' code, returns the electricity and heat demand profiles. I changed the building order to make the large hotel the first building.

createElectricityTariffProfile - generates the electricity tariff profiles based on the pfd references, for all buildings.

generateDemandCharges - computes the demand charges for a given building and day. Used by generate_all_figures.

extractPath - retrives the solution of the shortest path algorithm as power and heat production profiles, as well as the fuel consumption at each time step. 
Uses the function nakeinterp1 to interpolate the production when w the speed is ramped up so that the final length of the vector is correct.

transformAdjacencyMatrix - Transforms the transitions table generated by createTransitionNetwork into a more memory-efficient representation.

runAll - runs assignAllCosts, generate_all_figures and econAnalysisTables in sequence.

------------------------------------------------------------------------------------------
Notes:
If there is a need to speed up the code, some computations can be moved to the GPU.